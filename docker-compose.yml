version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: microservices-rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-net

  api-server:
    build:
      context: .
      dockerfile: api-server/Dockerfile
    container_name: microservices-api-server
    ports:
      - "8081:8081"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - GIN_MODE=release
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microservices-net

  job-runner:
    build:
      context: .
      dockerfile: job-runner/Dockerfile
    container_name: microservices-job-runner
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2  # Can run multiple job runners for load balancing
    networks:
      - microservices-net

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: microservices-frontend
    ports:
      - "8080:8080"
    environment:
      - API_SERVER_URL=http://api-server:8081
      - GIN_MODE=release
    depends_on:
      - api-server
    restart: unless-stopped
    networks:
      - microservices-net

volumes:
  rabbitmq_data:

networks:
  microservices-net:
    driver: bridge
