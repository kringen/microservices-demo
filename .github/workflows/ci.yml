name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics check_port_connectivity"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Install golangci-lint
      run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Run golangci-lint
      run: golangci-lint run ./...

    - name: Wait for RabbitMQ
      run: |
        echo "Waiting for RabbitMQ to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:15672; do sleep 2; done'

    - name: Test Root Module
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/

    - name: Test API Server
      run: |
        cd api-server
        go test -v -race -coverprofile=coverage-api.out ./...
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/

    - name: Test Frontend
      run: |
        cd frontend
        go test -v -race -coverprofile=coverage-frontend.out ./...
      env:
        API_SERVER_URL: http://localhost:8081

    - name: Test Job Runner
      run: |
        cd job-runner
        go test -v -race -coverprofile=coverage-job-runner.out ./...
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/

    - name: Test Shared Package
      run: |
        cd shared
        go test -v -race -coverprofile=coverage-shared.out ./...
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out,./api-server/coverage-api.out,./frontend/coverage-frontend.out,./job-runner/coverage-job-runner.out,./shared/coverage-shared.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [api-server, frontend, job-runner]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change detection

    - name: Check for changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          api-server:
            - 'api-server/**'
            - 'shared/**'
            - 'go.mod'
            - 'go.sum'
          frontend:
            - 'frontend/**'
            - 'shared/**'
            - 'go.mod'
            - 'go.sum'
          job-runner:
            - 'job-runner/**'
            - 'shared/**'
            - 'go.mod'
            - 'go.sum'

    - name: Set up Go
      if: steps.changes.outputs[matrix.service] == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      if: steps.changes.outputs[matrix.service] == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build ${{ matrix.service }}
      if: steps.changes.outputs[matrix.service] == 'true'
      run: |
        cd ${{ matrix.service }}
        go build -v -o bin/${{ matrix.service }} .

    - name: Upload build artifacts
      if: steps.changes.outputs[matrix.service] == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-binary
        path: ${{ matrix.service }}/bin/${{ matrix.service }}

    - name: Skip build notification
      if: steps.changes.outputs[matrix.service] != 'true'
      run: echo "⏭️ Skipping build for ${{ matrix.service }} - no relevant changes detected"

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [api-server, frontend, job-runner]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change detection

    - name: Check for changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          api-server:
            - 'api-server/**'
            - 'shared/**'
            - 'go.mod'
            - 'go.sum'
          frontend:
            - 'frontend/**'
            - 'shared/**'
            - 'go.mod'
            - 'go.sum'
          job-runner:
            - 'job-runner/**'
            - 'shared/**'
            - 'go.mod'
            - 'go.sum'

    - name: Set up Docker Buildx
      if: steps.changes.outputs[matrix.service] == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: steps.changes.outputs[matrix.service] == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      if: steps.changes.outputs[matrix.service] == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: kringen/microservices-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      if: steps.changes.outputs[matrix.service] == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Skip build notification
      if: steps.changes.outputs[matrix.service] != 'true'
      run: echo "⏭️ Skipping Docker build for ${{ matrix.service }} - no relevant changes detected"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics check_port_connectivity"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Wait for RabbitMQ
      run: |
        echo "Waiting for RabbitMQ to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:15672; do sleep 2; done'

    - name: Run Integration Tests
      run: go test -v -tags=integration ./...
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/
        API_SERVER_URL: http://localhost:8081
        FRONTEND_URL: http://localhost:8080
